<swctl:SwagControlBase x:Class="SwagOverFlow.WPF.Controls.BooleanExpressionControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:svm="clr-namespace:SwagOverFlow.ViewModels;assembly=SwagOverFlow"
             xmlns:swctl="clr-namespace:SwagOverFlow.WPF.Controls"
             xmlns:swvm="clr-namespace:SwagOverFlow.WPF.ViewModels"
             xmlns:swui="clr-namespace:SwagOverFlow.WPF.UI"
             xmlns:swcmd="clr-namespace:SwagOverFlow.WPF.Commands"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             mc:Ignorable="d" 
             x:Name="ThisControl"
             d:DesignHeight="450" d:DesignWidth="800">
    <swctl:SwagControlBase.Resources>
        <ContextMenu x:Key="OperationContextMenu"
                        Tag="{Binding PlacementTarget,
                        RelativeSource={RelativeSource Self},
                        Converter={swui:AncestorFindConverter},
                        ConverterParameter={x:Type swctl:SwagItemsControl}}"
                        swcmd:CommandBehavior.Event="Opened"
                        swcmd:CommandBehavior.Command="{Binding Tag.ItemContextMenuOpenedCommand, RelativeSource={RelativeSource Self}}"
                        swcmd:CommandBehavior.CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Add"
                      Visibility="{Binding Parent.Tag.ShowItemAddContextMenuItem, RelativeSource={RelativeSource Self}, Converter={swui:BoolToVisibilityConverter}}">
                <MenuItem.Icon>
                    <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.Add}" />
                </MenuItem.Icon>
                <MenuItem Header="OR" Tag="OR"
                          Command="{Binding Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                          CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicOr}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="AND" Tag="AND"
                          Command="{Binding Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                          CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicAnd}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Variable">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Variable}" />
                    </MenuItem.Icon>
                    <MenuItem Header="Boolean" Tag="VAR_BOOL"
                          Command="{Binding Parent.Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                          CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.TypeBoolean}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="String" Tag="VAR_STR"
                          Command="{Binding Parent.Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                          CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Alphabetical}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Remove" Command="{Binding Parent.Tag.RemoveCommand, RelativeSource={RelativeSource Self}}"
                      CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                      Visibility="{Binding Parent.Tag.ShowItemRemoveContextMenuItem, RelativeSource={RelativeSource Self}, Converter={swui:BoolToVisibilityConverter}}">
                <MenuItem.Icon>
                    <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Close}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="VariableContextMenu"
                        Tag="{Binding PlacementTarget,
                        RelativeSource={RelativeSource Self},
                        Converter={swui:AncestorFindConverter},
                        ConverterParameter={x:Type swctl:SwagItemsControl}}"
                        swcmd:CommandBehavior.Event="Opened"
                        swcmd:CommandBehavior.Command="{Binding Tag.ItemContextMenuOpenedCommand, RelativeSource={RelativeSource Self}}"
                        swcmd:CommandBehavior.CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
            <MenuItem Header="Remove" Command="{Binding Parent.Tag.RemoveCommand, RelativeSource={RelativeSource Self}}"
                      CommandParameter="{Binding RelativeSource={RelativeSource Self}}"
                      Visibility="{Binding Parent.Tag.ShowItemRemoveContextMenuItem, RelativeSource={RelativeSource Self}, Converter={swui:BoolToVisibilityConverter}}">
                <MenuItem.Icon>
                    <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Close}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <swui:BoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" TrueValue="Collapsed" FalseValue="Visible" />
    </swctl:SwagControlBase.Resources>
    <swctl:SwagItemsControl SwagItemsSource="{Binding Expression.ChildrenView, ElementName=ThisControl}" Tag="{Binding ElementName=ThisControl}"
                            AllowMove="{Binding AllowMove, ElementName=ThisControl}"
                            TreeViewItemDropPreview="SwagItemsControl_TreeViewItemDropPreview"
                            TreeViewItemLeavePreview="SwagItemsControl_TreeViewItemLeavePreview"
                            TreeViewItemDrop="SwagItemsControl_TreeViewItemDrop"
                            ShowSaveButton="{Binding ShowSaveButton, ElementName=ThisControl}"
                            ShowAddContextMenuItem="{Binding ShowAddContextMenuItem, ElementName=ThisControl}"
                            Save="SwagItemsControl_Save"
                            Add="SwagItemsControl_Add"
                            Copy="SwagItemsControl_Copy"
                            Paste="SwagItemsControl_Paste"
                            Export="SwagItemsControl_Export"
                            Import="SwagItemsControl_Import"
                            Remove="SwagItemsControl_Remove"
                            Clear="SwagItemsControl_Clear"
                            UseDefaultItemContextMenuOpened="True"
                            ShowItemRemoveContextMenuItem="{Binding ShowItemRemoveContextMenuItem, ElementName=ThisControl}"
                            ShowItemAddContextMenuItem="{Binding ShowItemAddContextMenuItem, ElementName=ThisControl}"
                            SaveHorizontalAlignment="Right"
                            SaveVerticalAlignment="Bottom">
        <swctl:SwagItemsControl.ContextMenu>
            <!--PlacementTarget here is SwagItemsControl, PlacementTarget.Tag is ThisControl (BooleanExpressionControl)-->
            <ContextMenu DataContext="{Binding PlacementTarget.Tag.Expression, RelativeSource={RelativeSource Self}}" Tag="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                <MenuItem Header="Save"
                          Command="{Binding Parent.Tag.SaveCommand, RelativeSource={RelativeSource Self}}"
                          Visibility="{Binding Parent.Tag.Tag.ShowSaveContextMenuItem, Converter={swui:BoolToVisibilityConverter}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.Save}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Root"
                          Visibility="{Binding HasChildren, Converter={StaticResource InverseBoolToVisibilityConverter}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconEntypoKind.FlowTree}" />
                    </MenuItem.Icon>
                    <MenuItem Header="OR" Tag="OR" Command="{Binding Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                              CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicOr}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="AND"  Tag="AND" Command="{Binding Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                              CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicAnd}" />
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Variable">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Variable}" />
                        </MenuItem.Icon>
                        <MenuItem Header="Boolean" Tag="VAR_BOOL" Command="{Binding Parent.Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                              CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                            <MenuItem.Icon>
                                <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.TypeBoolean}" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="String" Tag="VAR_STR" Command="{Binding Parent.Parent.Parent.Tag.AddCommand, RelativeSource={RelativeSource Self}}"
                              CommandParameter="{Binding RelativeSource={RelativeSource Self}}">
                            <MenuItem.Icon>
                                <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Alphabetical}" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="AllowMove" IsCheckable="True" IsChecked="{Binding Parent.Tag.AllowMove, RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.CursorMove}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Debug">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.AndroidDebugBridge}" />
                    </MenuItem.Icon>
                    <MenuItem Header="ShowSequence" IsCheckable="True" IsChecked="{Binding Parent.Parent.Tag.Tag.ShowSequence, RelativeSource={RelativeSource Self}}">
                        <MenuItem.Icon>
                            <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.FormatListNumbered}" />
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Copy"
                          Command="{Binding Parent.Tag.CopyCommand, RelativeSource={RelativeSource Self}}" 
                          CommandParameter="{Binding Parent.PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" 
                          Visibility="{Binding Parent.Tag.Tag.ShowCopyContextMenuItem, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.Clipboard}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Paste" 
                          Command="{Binding Parent.Tag.PasteCommand, RelativeSource={RelativeSource Self}}" 
                          CommandParameter="{Binding Parent.PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" 
                          Visibility="{Binding Parent.Tag.Tag.ShowPasteContextMenuItem, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.ClipboardPaste}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Export" 
                          Command="{Binding Parent.Tag.ExportCommand, RelativeSource={RelativeSource Self}}" 
                          CommandParameter="{Binding Parent.PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" 
                          Visibility="{Binding Parent.Tag.Tag.ShowExportContextMenuItem, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Export}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Import"
                          Command="{Binding Parent.Tag.ImportCommand, RelativeSource={RelativeSource Self}}" 
                          CommandParameter="{Binding Parent.PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" 
                          Visibility="{Binding Parent.Tag.Tag.ShowImportContextMenuItem, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource Self}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialKind.Import}" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Clear" 
                          Command="{Binding Parent.Tag.ClearCommand, RelativeSource={RelativeSource Self}}" 
                          CommandParameter="{Binding Parent.PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" 
                          Visibility="{Binding Parent.Tag.Expression.HasChildren, Converter={swui:BoolToVisibilityConverter}}">
                    <MenuItem.Icon>
                        <swctl:IconControl Kind="{x:Static iconPacks:PackIconMaterialDesignKind.Clear}" />
                    </MenuItem.Icon>
                </MenuItem>
            </ContextMenu>
        </swctl:SwagItemsControl.ContextMenu>
        <swctl:SwagItemsControl.ItemContainerStyles>
            <swui:SwagStyleCollection>
                <swui:SwagStyle Type="{x:Type svm:BooleanAndExpression}">
                    <swui:SwagStyle.Style>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="ContextMenu" Value="{StaticResource OperationContextMenu}" />
                        </Style>
                    </swui:SwagStyle.Style>
                </swui:SwagStyle>
                <swui:SwagStyle Type="{x:Type svm:BooleanOrExpression}">
                    <swui:SwagStyle.Style>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="ContextMenu" Value="{StaticResource OperationContextMenu}" />
                        </Style>
                    </swui:SwagStyle.Style>
                </swui:SwagStyle>
                <swui:SwagStyle Type="{x:Type svm:BooleanBooleanVariableExpression}">
                    <swui:SwagStyle.Style>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="ContextMenu" Value="{StaticResource VariableContextMenu}" />
                        </Style>
                    </swui:SwagStyle.Style>
                </swui:SwagStyle>
                <swui:SwagStyle Type="{x:Type svm:BooleanStringVariableExpression}">
                    <swui:SwagStyle.Style>
                        <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
                            <Setter Property="ContextMenu" Value="{StaticResource VariableContextMenu}" />
                        </Style>
                    </swui:SwagStyle.Style>
                </swui:SwagStyle>
            </swui:SwagStyleCollection>
        </swctl:SwagItemsControl.ItemContainerStyles>
        <swctl:SwagItemsControl.ItemTemplates>
            <swui:SwagTemplateCollection>
                <swui:SwagTemplate Type="{x:Type svm:BooleanAndExpression}">
                    <swui:SwagTemplate.DataTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding ChildrenView}">
                            <DockPanel>
                                <TextBlock Text="{Binding Sequence}" VerticalAlignment="Center" DockPanel.Dock="Left" Visibility="{Binding ShowSequence, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type swctl:BooleanExpressionControl}}}" />
                                <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicAnd}" />
                            </DockPanel>
                        </HierarchicalDataTemplate>
                    </swui:SwagTemplate.DataTemplate>
                </swui:SwagTemplate>
                <swui:SwagTemplate Type="{x:Type svm:BooleanOrExpression}">
                    <swui:SwagTemplate.DataTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding ChildrenView}">
                            <DockPanel>
                                <TextBlock Text="{Binding Sequence}" VerticalAlignment="Center" DockPanel.Dock="Left" Visibility="{Binding ShowSequence, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type swctl:BooleanExpressionControl}}}" />
                                <swctl:IconControl Kind="{x:Static iconPacks:PackIconModernKind.LogicOr}" />
                            </DockPanel>
                        </HierarchicalDataTemplate>
                    </swui:SwagTemplate.DataTemplate>
                </swui:SwagTemplate>
                <swui:SwagTemplate Type="{x:Type svm:BooleanBooleanVariableExpression}">
                    <swui:SwagTemplate.DataTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding Sequence}" VerticalAlignment="Center" DockPanel.Dock="Left" Grid.RowSpan="2" Grid.Column="0" Visibility="{Binding ShowSequence, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type swctl:BooleanExpressionControl}}}" />
                                <swctl:IconControl Grid.Row="0" Grid.Column="1" Kind="{x:Static iconPacks:PackIconMaterialKind.Key}" />
                                <TextBox Grid.Row="0" Grid.Column="2" Text="{Binding Key, Delay=250, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MinWidth="100" />
                                <swctl:IconControl Grid.Row="1" Grid.Column="1" Kind="{x:Static iconPacks:PackIconMaterialKind.Target}" />
                                <CheckBox Grid.Row="1" Grid.Column="2" IsChecked="{Binding TargetValue, Delay=250, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MinWidth="100" />
                            </Grid>
                        </DataTemplate>
                    </swui:SwagTemplate.DataTemplate>
                </swui:SwagTemplate>
                <swui:SwagTemplate Type="{x:Type svm:BooleanStringVariableExpression}">
                    <swui:SwagTemplate.DataTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Text="{Binding Sequence}" VerticalAlignment="Center" DockPanel.Dock="Left" Grid.RowSpan="2" Grid.Column="0" Visibility="{Binding ShowSequence, Converter={swui:BoolToVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type swctl:BooleanExpressionControl}}}" />
                                <swctl:IconControl Grid.Row="0" Grid.Column="1" Kind="{x:Static iconPacks:PackIconMaterialKind.Key}" />
                                <TextBox Grid.Row="0" Grid.Column="2" Text="{Binding Key, Delay=250, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MinWidth="100" />
                                <swctl:IconControl Grid.Row="1" Grid.Column="1" Kind="{x:Static iconPacks:PackIconMaterialKind.Target}" />
                                <TextBox Grid.Row="1" Grid.Column="2" Text="{Binding TargetValue, Delay=250, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" MinWidth="100" />
                            </Grid>
                        </DataTemplate>
                    </swui:SwagTemplate.DataTemplate>
                </swui:SwagTemplate>
            </swui:SwagTemplateCollection>
        </swctl:SwagItemsControl.ItemTemplates>
    </swctl:SwagItemsControl>
</swctl:SwagControlBase>
